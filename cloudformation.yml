Description:
  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an Internet Gateway, with a default
  route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ),
  and default routes for them in the private subnets.

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: [EnvironmentName]

  DBName:
    Description: Database name 
    Type: String
    Default: [DBName]

  DBUsername:
    Description: user for accessing the database
    Type: String
    Default: [DbUsername]

  DPPassword:
    Description: password for accessing the database
    Type: String
    Default: [DbPassword]

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: {"Fn::Select" : [ "0", { "Fn::GetAZs" : "" }]}
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC	
      AvailabilityZone: {"Fn::Select" : [ "1", { "Fn::GetAZs" : "" }]}
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "PostgreSql Security Group"
      GroupDescription: "PostgreSql traffic in, all traffic out."
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Security Group	

  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: For Launching RDS
      DBSubnetGroupName: db-subnet-group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  PostgresRDS:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AllocatedStorage: 5
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: Postgres-RDS
      DBName: !Ref DBName
      DBSubnetGroupName: !Ref DbSubnetGroup
      Engine: postgres
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MultiAZ: false
      Port: 5432
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} RDS-Postgres
      VPCSecurityGroups:
       - !Ref SecurityGroup
    
  ZappaS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private

  WebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html

  WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebsiteBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: !Join ['', ['arn:aws:s3:::', !Ref 'WebsiteBucket', /*]]


  WebsiteCloudfront:
      Type: AWS::CloudFront::Distribution
      DependsOn:
        - WebsiteBucket
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !Select [2, !Split ["/", !GetAtt WebsiteBucket.WebsiteURL]]
              Id: WebApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: http-only
          Enabled: 'true'
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            ## The origin id defined above
            TargetOriginId: WebApp
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
          

Outputs:
  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  ZappaS3Bucket:
    Value: !Ref ZappaS3Bucket
    Description: Zappa S3 Bucket used to deploy the backend

  WebsiteBucket:
    Value: !Ref WebsiteBucket
    Description: Name of the s3 bucket used to upload the frontend app

  CloudfrontEndpoint:
    Value: !GetAtt WebsiteCloudfront.DomainName
    Description: Endpoint for Cloudfront distribution

  DataBaseEndpoint:
    Value: !GetAtt PostgresRDS.Endpoint.Address
    Description: Database endpoint 

  SecurityGroup:
    Value: !Ref SecurityGroup
    Description: Database endpoint 




